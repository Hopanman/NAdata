corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt")
corrplot.mixed(
corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt", title='d')
corrplot.mixed(
corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt", title='연속형 변수들간의 상관계수')
corrplot.mixed(
corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt", title='연속형 변수들간의 상관계수', mar=c(1,1,3,1))
corrplot.mixed(
corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt", title='연속형 변수들간의 상관계수', mar=c(1,1,2,1))
corrplot.mixed(
corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt", title='연속형 변수들간의 상관계수', mar=c(1,1,1,1))
corrplot.mixed(
corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt", mar=c(1,1,1,1))
corrplot.mixed(
corr = cor(movie[c('AUDI_ACC','SHOW_TM', 'BUDGET', 'NAVER_CMT_NN', 'NAVER_PRE_EVAL', 'NAVER_PRE_EVAL_MUL','NAVER_EX_PT')], use = 'complete.obs'),
tl.col = "red",
upper = "ellipse", tl.pos = "lt", mar=c(0,0,0,0))
kruskal.test(AUDI_ACC~NATION_NM_NUM, data=movie)
str(movie)
par(mfrow=c(2,2))
plot(kruskal.test(AUDI_ACC~COMPANY_NM, data=movie))
plot(aov(AUDI_ACC~COMPANY_NM, data=movie))
plot(wilcox.test(AUDI_ACC~AWARDS,data=movie))
wilcox.test(AUDI_ACC~AWARDS,data=movie)
class(wilcox.test(AUDI_ACC~AWARDS,data=movie))
class(aov(AUDI_ACC~OPEN_YEAR, data=movie))
glimpse(movie)
names(movie)
ggplot(train,aes(x=NAVER_EX_PT)) + geom_histogram()
train <- subset(movie, select=c(TITLE,DIRECTOR,OPEN_DT,OPEN_MONTH,	OPEN_QUARTER,OPEN_WEEK,SHOW_TM,NATION_NM,	COMPANY_NM,	PRI_GENRE_NM,	SP_LANG,	WATCH_GRADE_NM,	ACTOR1,	ACTOR2,	SERIES,	NAVER_CMT_NN,	NAVER_EX_PT,	ORI_BOOK,	AUDI_ACC))
ggplot(train,aes(x=NAVER_EX_PT)) + geom_histogram()
ggplot(train,aes(x=SHOW_TM)) + geom_histogram()
aggregate(AUDI_ACC~SHOW_TM, data=movie, mean)
ggplot(aggregate(AUDI_ACC~SHOW_TM, data=movie, mean), aes(x=SHOW_TM,y=AUDI_ACC,color=SHOW_TM)) + geom_point()
ggplot(aggregate(AUDI_ACC~SHOW_TM, data=movie, mean), aes(x=SHOW_TM,y=AUDI_ACC,color=SHOW_TM)) + geom_bar(stat = 'identity')
ggplot(aggregate(AUDI_ACC~SHOW_TM, data=movie, mean), aes(x=SHOW_TM,y=AUDI_ACC,color=SHOW_TM)) + geom_line()
ggplot(aggregate(AUDI_ACC~SHOW_TM, data=movie, mean), aes(x=SHOW_TM,y=AUDI_ACC,color=SHOW_TM)) + geom_point()
read.csv('train_regression(2차).csv')
movie <- read.csv('train_regression(2차).csv')
movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC), audi_mean=mean(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(COMPANY_NM)) %>% head(10)
top10_company <- movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC), audi_mean=mean(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(COMPANY_NM)) %>% head(10)
ggplot(top10_company, aes(x=COMPANY_NM,y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,200000,400000,600000,800000), labels=c('0','20만명','40만명','60만명','80만명'))  + theme_classic() + labs(title='빈도수 top10배급사의 관객수 중앙값', x='배급사', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
ggplot(top10_company, aes(x=COMPANY_NM,y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,200000,400000,600000,800000), labels=c('0','20만명','40만명','60만명','80만명'))  + theme_classic() + labs(title='빈도수 top10배급사의 관객수 중앙값', x='배급사', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
ggplot(filter(movie, !is.na(PRI_GENRE_NM)), aes(x=PRI_GENRE_NM, y=AUDI_ACC, fill=PRI_GENRE_NM)) + stat_summary_bin(fun.y = median, geom='bar') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + coord_flip() + theme_classic()
ggplot(filter(movie, !is.na(PRI_GENRE_NM)), aes(x=PRI_GENRE_NM, y=log(AUDI_ACC), fill=PRI_GENRE_NM)) + stat_summary_bin(fun.y = median, geom='bar') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + coord_flip() + theme_classic()
ggplot(filter(movie, !is.na(PRI_GENRE_NM)), aes(x=PRI_GENRE_NM, y=log(AUDI_ACC), fill=PRI_GENRE_NM)) + stat_summary_bin(fun.y = median, geom='bar') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + coord_flip() + theme_classic() + labs(title='장르에 따른 관객수(로그) 중앙값', x='장르', y='log(관객수) 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
sort(movie$PRI_GENRE_NM)
sort(table(movie$PRI_GENRE_NM))
movie <- read.csv('movie_regression.csv', na.strings = c(''))
table(movie$SP_LANG)
movie$SP_LANG
ggplot(top20_actor, aes(x=ACTOR1,y=audi_median,fill=ACTOR1)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,1000000,2000000,3000000,4000000,5000000), labels=c('0','백만명','이백만명','삼백만명','사백만명','오백만명'))  + theme_classic() + labs(title='주인공출연빈도 top20배우의 관객수 중앙값', x='배우', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none', axis.text.x = element_text(angle=90))
top20_actor <- movie %>% group_by(ACTOR1) %>% summarise(actor_n = n(), audi_median=median(AUDI_ACC), audi_mean=mean(AUDI_ACC)) %>% arrange(desc(actor_n)) %>% filter(!is.na(ACTOR1)) %>% head(20)
ggplot(top20_actor, aes(x=ACTOR1,y=audi_median,fill=ACTOR1)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,1000000,2000000,3000000,4000000,5000000), labels=c('0','백만명','이백만명','삼백만명','사백만명','오백만명'))  + theme_classic() + labs(title='주인공출연빈도 top20배우의 관객수 중앙값', x='배우', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none', axis.text.x = element_text(angle=90))
top10_company <- movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(COMPANY_NM)) %>% head(10)
movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(COMPANY_NM)) %>% head(10)
movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(20)
movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=mean(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
top10_actor <- movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
ggplot(top10_actor, aes(x=ACTOR1, y=audi_sum, fill=ACTOR1)) + geom_bar(stat = 'identity')
movie %>% group_by(DIRECTOR) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(DIRECTOR)) %>% head(10)
movie %>% group_by(DIRECTOR) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(DIRECTOR)) %>% head(20)
movie %>% group_by(DIRECTOR) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(DIRECTOR)) %>% head(10)
ggplot(filter(movie, !is.na(BUDGET)),aes(x=BUDGET, y=log(AUDI_ACC), color=BUDGET)) + geom_point() + scale_color_viridis(begin = 1, end = 0, option = 'D') + geom_smooth(method = 'lm', color = 'red3', fill = 'red3') + scale_y_continuous(breaks = c(0, 5000000, 10000000, 15000000), labels = c('0명', '오백만명', '천만명', '천오백만명')) + scale_x_continuous(breaks=c(0,100000000,200000000,300000000,400000000, 500000000), labels=c('0','1억','2억','3억','4억','5억')) + theme_classic()  + labs(title='예산에 따른 관객수', x='예산(Dollar)', y='관객수') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
library(tidyverse)
library(corrplot)
library(plotly)
library(ggthemes)
library(viridis)
library(gridExtra)
library(VIM)
library(lubridate)
library(randomForest)
library(lawstat)
library(varhandle)
library(caTools)
getwd()
movie <- read.csv('movie_regression.csv', na.strings = c(''))
glimpse(movie)
movie <- read.csv('train_regression(2차).csv', na.strings = c(''))
glimpse(movie)
movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(COMPANY_NM)) %>% head(10)
movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(COMPANY_NM)&!(COMPANY_NM=='기타')) %>% head(10)
top_company <- movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(COMPANY_NM)&!(COMPANY_NM=='기타')) %>% head(10)
top10_company <- movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(COMPANY_NM)&!(COMPANY_NM=='기타')) %>% head(10)
rm(top_company)
ggplot(top10_company, aes(x=COMPANY_NM,y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(top10_company, aes(x=reorder(COMPANY_NM,-audi_median),y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
reorder(COMPANY_NM,-audi_median)
reorder(top10_company$COMPANY_NM,-audi_median)
reorder(top10_company$COMPANY_NM,-top10_company$audi_median)
ggplot(top10_company, aes(x=reorder(COMPANY_NM,-audi_median),y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(top10_company, aes(x=reorder(COMPANY_NM,-audi_median),y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,500000,1000000,1500000), labels=c('0','50만명','100만명','150만명'))  + theme_classic() + labs(title='빈도수 top10배급사의 관객수 중앙값', x='배급사', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
ggplot(top10_company, aes(x=reorder(COMPANY_NM,audi_median),y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,500000,1000000,1500000), labels=c('0','50만명','100만명','150만명'))  + theme_classic() + labs(title='빈도수 top10배급사의 관객수 중앙값', x='배급사', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
ggplot(filter(movie, !is.na(PRI_GENRE_NM)), aes(x=PRI_GENRE_NM, y=log(AUDI_ACC), fill=PRI_GENRE_NM)) + stat_summary_bin(fun.y = mean, geom='bar') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + coord_flip() + theme_classic() + labs(title='장르에 따른 관객수(로그) 평균', x='장르', y='log(관객수) 평균') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
movie <- read.csv('train_regression(2차).csv', na.strings = c(''))
glimpse(movie)
top10_company <- movie %>% group_by(COMPANY_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(COMPANY_NM)&!(COMPANY_NM=='기타')) %>% head(10)
ggplot(top10_company, aes(x=reorder(COMPANY_NM,audi_median),y=audi_median,fill=COMPANY_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,500000,1000000,1500000), labels=c('0','50만명','100만명','150만명'))  + theme_classic() + labs(title='빈도수 top10배급사의 관객수 중앙값', x='배급사', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
top20_nation <- movie %>% group_by(NATION_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(NATION_NM)) %>% head(20)
top20_nation
movie$NATION_NM
top20_nation <- movie %>% group_by(NATION_NM) %>% summarise(cnt = n(), audi_median=median(AUDI_ACC)) %>% arrange(desc(cnt)) %>% filter(!is.na(NATION_NM)) %>% head(20)
ggplot(top20_nation, aes(x=NATION_NM,y=audi_median,fill=NATION_NM)) + geom_bar(stat='identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)  + coord_flip() + scale_y_continuous(breaks=c(0,20000,40000,60000), labels=c('0','2만명','4만명','6만명'))  + theme_classic() + labs(title='빈도수 top20제작국가의 관객수 중앙값', x='제작국가', y='관객수 중앙값') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
library(tidyverse)
library(corrplot)
library(plotly)
library(viridis)
library(gridExtra)
library(VIM)
library(randomForest)
library(lubridate)
library(ggthemes)
library(lawstat)
library(varhandle)
library(caTools)
read.csv('train_regression(3차).csv',na.strings=c(''))
train <- read.csv('train_regression(3차).csv',na.strings=c(''))
glimpse(train)
train[-4]
real_train <- train[-4]
glimpse(train)
glimpse(real_train)
real_train$OPEN_MONTH <- factor(real_train$OPEN_MONTH)
real_train$OPEN_QUARTER <- factor(real_train$OPEN_QUARTER)
real_train$SERIES <- factor(real_train$SERIES)
real_train$ORI_BOOK <- factor(real_train$ORI_BOOK)
glimpse(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train$SERIES[is.na(real_train$SERIES)] <- 0
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train <- na.omit(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
glimpse(real_train)
summary(real_train)
real_train <- mutate(real_train, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
summary(real_train)
set.seed(222)
model <- randomForest(AUDI_ACC ~ .,data = real_train, ntree = 501, replace = TRUE, nodesize = 9,importance = TRUE)
model
importance(model)
levene.test(real_train$AUDI_ACC, real_train$DIRECTOR_53, location='mean')
kruskal.test(AUDI_ACC~DIRECTOR_53, data=real_train)
levene.test(real_train$AUDI_ACC, real_train$ACTOR_53, location='mean')
kruskal.test(AUDI_ACC~ACTOR_53, data=real_train)
train <- read.csv('train_regression(3차).csv',na.strings=c(''))
glimpse(train)
real_train <- train[-c(2,4)]
glimpse(real_train)
real_train$OPEN_QUARTER <- factor(real_train$OPEN_QUARTER)
real_train$SERIES <- factor(real_train$SERIES)
real_train$ORI_BOOK <- factor(real_train$ORI_BOOK)
glimpse(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train$SERIES[is.na(real_train$SERIES)] <- 0
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train <- na.omit(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train <- mutate(real_train, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
summary(real_train)
set.seed(222)
model <- randomForest(AUDI_ACC ~ .,data = real_train, ntree = 501, replace = TRUE, nodesize = 9,importance = TRUE)
model
importance(model)
model
train <- read.csv('train_regression(3차).csv',na.strings=c(''))
glimpse(train)
real_train <- train[-c(2,3,4)]
glimpse(real_train)
real_train$SERIES <- factor(real_train$SERIES)
real_train$ORI_BOOK <- factor(real_train$ORI_BOOK)
glimpse(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train$SERIES[is.na(real_train$SERIES)] <- 0
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train <- na.omit(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
glimpse(real_train)
summary(real_train)
real_train <- mutate(real_train, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
summary(real_train)
set.seed(222)
model <- randomForest(AUDI_ACC ~ .,data = real_train, ntree = 501, replace = TRUE, nodesize = 9,importance = TRUE)
model
train <- read.csv('train_regression(3차).csv',na.strings=c(''))
glimpse(train)
real_train <- train[-c(3,4)]
glimpse(real_train)
real_train$OPEN_MONTH <- factor(real_train$OPEN_MONTH)
real_train$SERIES <- factor(real_train$SERIES)
real_train$ORI_BOOK <- factor(real_train$ORI_BOOK)
glimpse(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train$SERIES[is.na(real_train$SERIES)] <- 0
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train <- na.omit(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
glimpse(real_train)
summary(real_train)
real_train <- mutate(real_train, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
summary(real_train)
set.seed(222)
model <- randomForest(AUDI_ACC ~ .,data = real_train, ntree = 501, replace = TRUE, nodesize = 9,importance = TRUE)
model
importance(model)
train <- read.csv('train_regression(3차).csv',na.strings=c(''))
glimpse(train)
real_train <- train[-c(2,3,4)]
glimpse(real_train)
real_train$SERIES <- factor(real_train$SERIES)
real_train$ORI_BOOK <- factor(real_train$ORI_BOOK)
glimpse(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train$SERIES[is.na(real_train$SERIES)] <- 0
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train <- na.omit(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
glimpse(real_train)
summary(real_train)
real_train <- mutate(real_train, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
summary(real_train)
set.seed(222)
model <- randomForest(AUDI_ACC ~ .,data = real_train, ntree = 501, replace = TRUE, nodesize = 9,importance = TRUE)
model
importance(model)
model
read.csv('test(3차).csv',na.strings = c(''))
test <- read.csv('test(3차).csv',na.strings = c(''))
na.omit(test)
test <- na.omit(test)
test
glimpse(test)
test <- test[-c(1,3,4,5,6)]
glimpse(test)
glimpse(real_train)
names(test)
names(real_train)
test$AUDI_ACC <- NA
imsi <- rbind(real_train,test)
test <- imsi[4188:4197,]
test
glimpse(test)
test <- test[-12]
glimpse(test)
real_train$PRI_GENRE_NM
test$PRI_GENRE_NM
test$DIRECTOR_53
glimpse(test)
test <- mutate(test, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1))
summary(test)
predict(model,test)
y_pred <- predict(model,test)
test$AUDI_ACC_PRED <- y_pred
test <- mutate(test, AUDI_ACC_PRED=10^(AUDI_ACC_PRED))
test
library(MASS)
library(randomForest)
library(caret)
newdata <- read.csv('train_regression(최종).csv',na.strings=c(''))
newdata <- read.csv('train_regression(최종).csv',na.strings=c(''))
glimpse(newdata)
aggr(newdata, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
newdata$SERIES[is.na(newdata$SERIES)] <- 0
newdata <- na.omit(newdata)
aggr(newdata, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
glimpes(newdata)
glimpse(newdata)
newdata$OPEN_WEEK <- factor(newdata$OPEN_WEEK)
glimpse(newdata)
newdata$SERIES <- factor(newdata$SERIES)
newdata$ORI_BOOK <- factor(newdata$ORI_BOOK)
glimpse(newdata)
str(newdata)
summary(newdata)
newdata <- mutate(newdata, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
summary(newdata)
glimpse(newdata)
fitdata <- newdata[c('TOP_DIRECTOR','OPEN_WEEK', 'SHOW_TM', 'NATION_NM', 'COMPANY_NM', 'PRI_GENRE_NM', 'WATCH_GRADE_NM','TOP_ACTOR', 'SERIES', 'NAVER_CMT_NN', 'NAVER_EX_PT', 'AUDI_ACC')]
glimpse(newdata)
glimpse(fitdata)
rfcr.fit <- train(AUDI_ACC~., data=fitdata, method='ranger')
rfcr.fit
read.csv('test(3차).csv')
read.csv('test(3차).csv')
read.csv('test(3차).csv')
read.csv('test(3차).csv', na.strings=c(''))
test <- read.csv('test(3차).csv', na.strings=c(''))
glimpse(test)
names(fitdata)
test <- test[-c(1,3,4,5,16)]
na.omit(test)
test <- na.omit(test)
aggr(test, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
glimpse(test)
glimpse(fitdata)
test$AUDI_ACC <- NA
imsi <- rbind(fitdata,test)
test <- imsi[4188:4197,]
test
test$TOP_DIRECTOR
glimpse(test)
test <- test[-12]
glimpse(test)
test$OPEN_WEEK
test$TOP_ACTOR
summary(test)
test <- mutate(test, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1))
summary(test)
predict(rfcr.fit,test)
10^(6.371588)
predict(rfcr.fit,test)
y_pred <- predict(rfcr.fit,test)
summary(test)
test$AUDI_ACC_PRED <- y_pred
test
test <- mutate(test, AUDI_ACC_PRED=10^(AUDI_ACC_PRED))
test
test
test$AUDI_ACC_PRED <- floor(test$AUDI_ACC_PRED)
test
write.csv(test,'prediction(3차).csv',row.names = F, fileEncoding = 'cp949')
movie <- read.csv('train_regression(2차).csv', na.strings = c(''))
library(ggplot2)
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_sum), y=audi_sum, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,20000000,40000000,60000000), labels=c('0','2000만명','4000만명','6000만명'))  + theme_classic() + labs(title='관객수 TOP10 주인공출연배우', x='배우', y='관객수 총합') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
top10_actor <- movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_sum), y=audi_sum, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,20000000,40000000,60000000), labels=c('0','2000만명','4000만명','6000만명'))  + theme_classic() + labs(title='관객수 TOP10 주인공출연배우', x='배우', y='관객수 총합') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
movie <- read.csv('train_regression(2차).csv', na.strings = c(''))
top10_actor <- movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
library(tidyverse)
top10_actor <- movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
movie <- read.csv('movie_regression.csv', na.strings = c(''))
glimpse(movie)
top10_actor <- movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_sum=sum(AUDI_ACC)) %>% arrange(desc(audi_sum)) %>% filter(!is.na(ACTOR1)) %>% head(10)
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_sum), y=audi_sum, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,20000000,40000000,60000000), labels=c('0','2000만명','4000만명','6000만명'))  + theme_classic() + labs(title='관객수 TOP10 주인공출연배우', x='배우', y='관객수 총합') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
library(viridis)
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_sum), y=audi_sum, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,20000000,40000000,60000000), labels=c('0','2000만명','4000만명','6000만명'))  + theme_classic() + labs(title='관객수 TOP10 주인공출연배우', x='배우', y='관객수 총합') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
top10_actor <- movie %>% group_by(ACTOR1) %>% summarise(cnt = n(), audi_mean=mean(AUDI_ACC)) %>% arrange(desc(audi_mean)) %>% filter(!is.na(ACTOR1)) %>% head(10)
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_mean), y=audi_mean, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_mean), y=audi_mean, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + coord_flip()
top10_actor
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_mean), y=audi_mean, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)+ scale_y_continuous(breaks=c(0,5000000,10000000), labels=c('0','500만명','1000만명'))  + theme_classic() + labs(title='관객수 TOP10 주인공출연배우', x='배우', y='관객수 평ㄱ') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
ggplot(top10_actor, aes(x=reorder(ACTOR1,audi_mean), y=audi_mean, fill=ACTOR1)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)+ scale_y_continuous(breaks=c(0,5000000,10000000), labels=c('0','500만명','1000만명'))  + theme_classic() + labs(title='관객수 TOP10 주인공출연배우', x='배우', y='관객수 평균') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
ggplot(top10_director, aes(x=reorder(DIRECTOR,audi_mean), y=audi_mean, fill=DIRECTOR)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
top10_director <- movie %>% group_by(DIRECTOR) %>% summarise(cnt = n(), audi_mean=mean(AUDI_ACC)) %>% arrange(desc(audi_mean)) %>% filter(!is.na(DIRECTOR)) %>% head(10)
ggplot(top10_director, aes(x=reorder(DIRECTOR,audi_mean), y=audi_mean, fill=DIRECTOR)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(top10_director, aes(x=reorder(DIRECTOR,audi_mean), y=audi_mean, fill=DIRECTOR)) + geom_bar(stat = 'identity') + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_y_continuous(breaks=c(0,5000000,10000000), labels=c('0','500만명','1000만명')) + theme_classic() + labs(title='관객수 TOP10 감독', x='감독', y='관객수 평균') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none') + coord_flip()
library(tidyverse)
library(corrplot)
library(plotly)
library(ggthemes)
library(viridis)
library(gridExtra)
library(VIM)
library(lubridate)
library(randomForest)
library(lawstat)
library(varhandle)
library(caTools)
#훈련 전 전처리
train <- read.csv('train_regression(1차).csv')
train$OPEN_MONTH <- factor(train$OPEN_MONTH)
train$OPEN_QUARTER <- factor(train$OPEN_QUARTER)
train$SERIES <- factor(train$SERIES)
train$ORI_BOOK <- factor(train$ORI_BOOK)
glimpse(train)
summary(train)
train <- mutate(train, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
#학습용 데이터와 검증용 데이터 분리
sample <- sample.split(train$AUDI_ACC,SplitRatio = 0.80)
real_train <- subset(train, sample==T)
test <- subset(train, sample==F)
set.seed(222)
model <- randomForest(AUDI_ACC ~ .,data = real_train, ntree = 501, replace = TRUE, nodesize = 9,importance = TRUE)
model
#변수중요도와 노드불순도확인
importance(model)
#변수중요도와 노드불순도확인
imp <- importance(model)
class(imp)
library(reshape2)
melt(imp)
imp
meltdata <- melt(imp)
rm(imp)
#변수중요도와 노드불순도확인
imp <- importance(model)
row.names(imp)
imp[,'%IncMSE']
round(imp[,'%IncMSE'])
round(imp[,'%IncMSE'],0)
data.frame(Variables = row.names(imp), IncMSE = round(imp[,'%IncMSE'],0), IncNodePurity = round(imp[,'IncNodePurity'],0))
varImportance <- data.frame(Variables = row.names(imp), IncMSE = round(imp[,'%IncMSE'],0), IncNodePurity = round(imp[,'IncNodePurity'],0))
glimpse(varImportance)
ggplot(varImportance, aes(x=reorder(Variables, IncMSE), y=IncMSE, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(varImportance, aes(x=reorder(Variables, IncMSE), y=IncMSE, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_x_discrete(breaks=c('OPEN_QUARTER','OPEN_MONTH','ORI_BOOK','SERIES','NAVER_EX_PT','WATCH_GRADE_NM','PRI_GENRE_NM','SHOW_TM','TOP_COMPANY_NM','NATION_NM','NAVER_CMT_NN'), labels=c('개봉분기','개봉월','원작도서','시리즈','기대지수','관람등급','장르','상영시간','배급사','제작국가','댓글개수')) + theme_classic() + labs(x='변수명') + theme(legend.position = 'none')
ggplot(varImportance, aes(x=reorder(Variables, IncMSE), y=IncMSE, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_x_discrete(breaks=c('OPEN_QUARTER','OPEN_MONTH','ORI_BOOK','SERIES','NAVER_EX_PT','WATCH_GRADE_NM','PRI_GENRE_NM','SHOW_TM','TOP_COMPANY_NM','NATION_NM','NAVER_CMT_NN'), labels=c('개봉분기','개봉월','원작도서','시리즈','기대지수','관람등급','장르','상영시간','배급사','제작국가','댓글개수')) + theme_classic() + labs(title='1차 회귀 결과 변수중요도(IncMSE)', x='변수명') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
ggplot(varImportance, aes(x=reorder(Variables, IncNodePurity), y=IncNodePurity, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(varImportance, aes(x=reorder(Variables, IncNodePurity), y=IncNodePurity, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_x_discrete(breaks=c('ORI_BOOK','OPEN_QUARTER','WATCH_GRADE_NM','SERIES','OPEN_MONTH','PRI_GENRE_NM','SHOW_TM','NATION_NM','NAVER_EX_PT','TOP_COMPANY_NM','NAVER_CMT_NN'), labels=c('원작도서','개봉분기','관람등급','시리즈','개봉월','장르','상영시간','제작국가','기대지수','배급사','댓글개수')) + theme_classic() + labs(title='1차 회귀 결과 변수중요도(IncNodePurity)', x='변수명') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
model
test <- read.csv('test.csv',na.strings = c(''))
str(real_train)
str(test)
test <- test[-c(1,2,5)]
str(real_train)
names(real_train)
names(test)
test$AUDI_ACC <- NA
imsi <- rbind(real_train,test)
test <- read.csv('test(1차).csv',na.strings = c(''))
str(test)
test <- test[-c(1,2,5)]
names(test)
names(real_train)
test$AUDI_ACC <- NA
imsi <- rbind(real_train,test)
test <- imsi[3347:3366,]
test
test$OPEN_MONTH
test <- test[-12]
test
test <- mutate(test, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1))
y_pred <- predict(model,test)
levels(real_train$TOP_COMPANY_NM)
levels(real_train$NATION_NM)
test <- read.csv('test(1차).csv',na.strings = c(''))
str(test)
test <- test[-c(1,2,5)]
names(test)
names(real_train)
test$AUDI_ACC <- NA
imsi <- rbind(real_train,test)
test <- imsi[3347:3366,]
test$OPEN_MONTH
test <- test[-12]
test
test <- mutate(test, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1))
y_pred <- predict(model,test)
test$AUDI_ACC_PRED <- y_pred
test <- mutate(test, AUDI_ACC_PRED=10^(AUDI_ACC_PRED))
test$AUDI_ACC_PRED <- floor(test$AUDI_ACC_PRED)
test
write.csv(test,'prediction.csv',row.names = F, fileEncoding = 'cp949')
model
train <- read.csv('train_regression(2차).csv',na.strings = c(''))
glimpse(train)
#사용하지 않는 변수 제거
real_train <- train[-3]
#범주형 변수로 변경
glimpse(real_train)
real_train$OPEN_MONTH <- factor(real_train$OPEN_MONTH)
real_train$OPEN_QUARTER <- factor(real_train$OPEN_QUARTER)
real_train$SERIES <- factor(real_train$SERIES)
real_train$ORI_BOOK <- factor(real_train$ORI_BOOK)
glimpse(real_train)
#결측치 처리
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
real_train$SERIES[is.na(real_train$SERIES)] <- 0
real_train <- na.omit(real_train)
aggr(real_train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
glimpse(real_train)
#최소값과 최대값의 차이가 큰 변수들에 로그를 씌워서 편차를 줄인다.
real_train <- mutate(real_train, NAVER_CMT_NN = log10(NAVER_CMT_NN+1), NAVER_EX_PT = log10(NAVER_EX_PT+1), AUDI_ACC = log10(AUDI_ACC))
summary(real_train)
set.seed(222)
model <- randomForest(AUDI_ACC ~ .,data = real_train, ntree = 501, replace = TRUE, nodesize = 9,importance = TRUE)
model
#변수 중요도 확인
importance(model)
#변수 중요도 확인
imp <- importance(model)
varImportance <- data.frame(Variables = row.names(imp), IncMSE = round(imp[,'%IncMSE'],0), IncNodePurity = round(imp[,'IncNodePurity'],0))
varImportance
ggplot(varImportance, aes(x=reorder(Variables, IncMSE), y=IncMSE, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(varImportance, aes(x=reorder(Variables, IncMSE), y=IncMSE, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_x_discrete(breaks=c('OPEN_MONTH','OPEN_QUARTER','ORI_BOOK','SERIES','WATCH_GRADE_NM','NAVER_EX_PT','SHOW_TM','NATION_NM','PRI_GENRE_NM','NAVER_CMT_NN','COMPANY_NM'), labels=c('개봉월','개봉분기','원작도서','시리즈','관람등급','기대지수','상영시간','제작국가','장르','댓글개수','배급사')) + theme_classic() + labs(title='2차 회귀 결과 변수중요도(IncMSE)', x='변수명') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
ggplot(varImportance, aes(x=reorder(Variables, IncNodePurity), y=IncNodePurity, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0)
ggplot(varImportance, aes(x=reorder(Variables, IncNodePurity), y=IncNodePurity, fill=Variables)) + geom_bar(stat = 'identity') + coord_flip() + scale_fill_viridis(discrete = T, option = 'E', begin = 1, end = 0) + scale_x_discrete(breaks=c('ORI_BOOK','OPEN_QUARTER','WATCH_GRADE_NM','SERIES','OPEN_MONTH','SHOW_TM','PRI_GENRE_NM','NATION_NM','NAVER_EX_PT','NAVER_CMT_NN','COMPANY_NM'), labels=c('원작도서','개봉분기','관람등급','시리즈','개봉월','상영시간','장르','제작국가','기대지수','댓글개수','배급사')) + theme_classic() + labs(title='2차 회귀 결과 변수중요도(IncNodePurity)', x='변수명') + theme(plot.title=element_text(hjust=0.5, face='bold'), legend.position = 'none')
library(tidyverse)
library(corrplot)
library(plotly)
library(ggthemes)
library(viridis)
library(gridExtra)
library(VIM)
library(lubridate)
library(randomForest)
library(lawstat)
library(varhandle)
library(caTools)
read.csv('movie_regression.csv',na.strings = c(''))
movie <- read.csv('movie_regression.csv',na.strings = c(''))
names(movie)
movie[-c(4,5,6,7,8,9,12,14,15,16,19,28)]
movie <- movie[-c(4,5,6,7,8,9,12,14,15,16,19,28)]
aggr(train, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
aggr(movie, sortVars=T,prop=F, cex.axis=0.45, numbers=T)
